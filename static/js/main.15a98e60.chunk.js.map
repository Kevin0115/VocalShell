{"version":3,"sources":["components/Header.js","components/VocalShell.js","components/Help.js","components/CommandLog.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","VocalShell","props","onRecordingComplete","blob","a","async","blobToBuffer","err","buffer","setState","loading","console","error","state","blobURL","window","URL","revokeObjectURL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","base64data","result","replace","log","fetch","API_URL","method","headers","body","JSON","stringify","audio","then","res","json","success","input","commandList","cmd","push","output","catch","finally","onRecordingError","blinkCursor","renderRecorder","bind","setInterval","this","map","item","index","key","Spinner","animation","style","margin","renderCommands","Help","Table","striped","bordered","hover","CommandLog","logs","renderLogs","fetchLogs","content","date","Body","Card","width","Tabs","defaultActiveKey","Tab","eventKey","title","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15a98e60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/Header.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header-content\">\r\n        <h1>VocalShell</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Recorder from 'react-mp3-recorder';\r\nimport { Spinner } from 'react-bootstrap'\r\nimport ReactAudioPlayer from 'react-audio-player';\r\nimport '../css/VocalShell.css';\r\n\r\nimport blobToBuffer from 'blob-to-buffer';\r\n\r\nconst API_URL = 'http://34.94.33.138:8080';\r\n\r\nclass VocalShell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blobURL: '',\r\n      blinkCursor: false,\r\n      commandList: [],\r\n      loading: false,\r\n    };\r\n    this.renderRecorder = this.renderRecorder.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('mounted');\r\n    setInterval(() => {\r\n      this.setState({blinkCursor: !this.state.blinkCursor})\r\n    }, 500);\r\n  }\r\n\r\n  onRecordingComplete = async (blob) => {\r\n    blobToBuffer(blob, async (err, buffer) => {\r\n      this.setState({loading: true});\r\n      if (err) {\r\n        console.error(err)\r\n        return\r\n      }\r\n      if (this.state.blobURL) {\r\n        window.URL.revokeObjectURL(this.state.blobURL)\r\n      }\r\n      this.setState({\r\n        blobURL: window.URL.createObjectURL(blob)\r\n      })\r\n\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(blob);\r\n      reader.onloadend = () => {\r\n        const base64data = reader.result.replace(/^data:.+;base64,/, '');\r\n        console.log(base64data);\r\n\r\n        fetch(API_URL + '/terminal', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            audio: base64data,\r\n          })\r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          console.log(json);\r\n          if (json.success) {\r\n            if (json.input === 'clear') {\r\n              this.setState({commandList: [{cmd: 'clear'}]});\r\n              return;\r\n            }\r\n            this.state.commandList.push({\r\n              cmd: json.input\r\n            })\r\n            this.state.commandList.push({\r\n              cmd: json.output\r\n            })\r\n          } else {\r\n            this.state.commandList.push({\r\n              cmd: json.output\r\n            })\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('Error Transcribing Audio');\r\n        })\r\n        .finally(() => {\r\n          this.setState({loading: false});\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onRecordingError = (err) => {\r\n    if (this.state.blobURL) {\r\n      window.URL.revokeObjectURL(this.state.blobURL)\r\n    }\r\n    this.setState({ blobURL: null })\r\n  }\r\n\r\n  renderCommands() {\r\n    return this.state.commandList.map((item, index) => {\r\n      return <p key={index}>> {item.cmd}</p>;\r\n    })\r\n  }\r\n\r\n  renderRecorder() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <Spinner className=\"loading\" animation=\"grow\" />\r\n      )\r\n    } else {\r\n      return (\r\n        <Recorder\r\n          onRecordingComplete={this.onRecordingComplete}\r\n          onRecordingError={this.onRecordingError}\r\n          style={{\r\n            margin: '0 auto'\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"vocalshell\">\r\n        <div className=\"body\">\r\n          <div className=\"recording\">\r\n            <div className=\"instructions\">\r\n              Press and hold to record your command.\r\n            </div>\r\n            {this.renderRecorder()}\r\n            {/* {this.state.blobURL && (\r\n              <ReactAudioPlayer\r\n                src={this.state.blobURL}\r\n                controls\r\n                style={{\r\n                  minWidth: '500px'\r\n                }}\r\n              />\r\n            )} */}\r\n          </div>\r\n          <div className=\"shell\">\r\n            <div className=\"topbar\">\r\n              <span className=\"red-dot\"></span>\r\n              <span className=\"yellow-dot\"></span>\r\n              <span className=\"green-dot\"></span>\r\n            </div>\r\n            <div className=\"shell-body\">\r\n              {this.renderCommands()}\r\n              > {this.state.blinkCursor ? '_' : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VocalShell;","import React, { Component } from 'react';\r\nimport { Card, Tabs, Tab, Table } from 'react-bootstrap';\r\nimport '../css/Help.css';\r\n\r\nclass Help extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"help-content\">\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>Shell Command</th>\r\n                      <th>Vocal Command</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>1</td>\r\n                      <td>cd</td>\r\n                      <td>change directory</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>2</td>\r\n                      <td>pwd</td>\r\n                      <td>print working directory</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>3</td>\r\n                      <td>ls</td>\r\n                      <td>listing directory</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>4</td>\r\n                      <td>rm</td>\r\n                      <td>remove</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>5</td>\r\n                      <td>mkdir</td>\r\n                      <td>make directory</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>6</td>\r\n                      <td>clear</td>\r\n                      <td>clear</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n        </div>\r\n              \r\n    );\r\n  }\r\n}\r\n\r\nexport default Help;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass CommandLog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      logs: [],\r\n    }\r\n    this.renderLogs = this.renderLogs.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchLogs();\r\n  }\r\n\r\n  fetchLogs() {\r\n    fetch('http://34.94.33.138:8080' + '/command_log', {\r\n      method: 'GET'\r\n    })\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      this.setState({logs: json.content});\r\n    })\r\n    .catch(function(error) {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  renderLogs() {\r\n    return this.state.logs.map((item, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <div className=\"log\">\r\n            <span className=\"command\">{item.cmd}&nbsp;</span>\r\n            {item.date}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"logs-content\">\r\n        <div className=\"logs\">\r\n          {this.renderLogs()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommandLog;","import React, { Component } from 'react';\r\nimport { Card, Tabs, Tab, Table } from 'react-bootstrap';\r\nimport '../css/CommandLog.css';\r\n\r\nimport VocalShell from './VocalShell';\r\nimport Help from './Help';\r\nimport CommandLog from './CommandLog';\r\n\r\nclass Body extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"body-content\">\r\n        <Card style={{ width: '80vw' }}>\r\n          <Card.Body>\r\n            <Tabs defaultActiveKey=\"shell\">\r\n              <Tab eventKey=\"shell\" title=\"Shell\">\r\n                <div className=\"vocalshell-wrapper\">\r\n                  <VocalShell />\r\n                </div>\r\n              </Tab>\r\n              <Tab eventKey=\"logs\" title=\"Logs\">\r\n                <CommandLog />\r\n              </Tab>\r\n              <Tab eventKey=\"help\" title=\"Help\">\r\n                <div className=\"helpshell-wrapper\">\r\n                  <Help />\r\n                </div>\r\n              </Tab>\r\n            </Tabs>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body';\r\nimport VocalShell from './components/VocalShell';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <VocalShell /> */}\r\n      <Header />\r\n      <Body />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}